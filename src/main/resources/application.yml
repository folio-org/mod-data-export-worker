server:
  port: 8081
  tomcat.threads.max: 100
spring:
  application:
    name: mod-data-export-worker
  jackson:
    default-property-inclusion: non_empty
    deserialization:
      fail-on-unknown-properties: false
  kafka:
    bootstrap-servers: ${KAFKA_HOST:localhost}:${KAFKA_PORT:9092}
    listener:
      ack-mode: manual
      concurrency: ${KAFKA_CONCURRENCY_LEVEL:30}
    consumer:
      auto-offset-reset: latest
      enable-auto-commit: false
      properties.max.poll.interval.ms: ${KAFKA_CONSUMER_POLL_INTERVAL:3600000}
  datasource:
    continue-on-error: true
    username: ${DB_USERNAME:folio_admin}
    password: ${DB_PASSWORD:folio_admin}
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_DATABASE:okapi_modules}
  jpa:
    open-in-view: false
    database-platform: org.hibernate.dialect.PostgreSQL10Dialect
    hibernate:
      ddl-auto: none
      naming:
        physical-strategy: org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy
        implicit-strategy: org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQL10Dialect
        format_sql: true
    show-sql: false
  batch:
    job:
      enabled: false
    initializer:
      enabled: false
  liquibase:
    changeLog: classpath:db/changelog/data-export-worker-changelog-master.xml
    enabled: true
  servlet:
    multipart:
      max-file-size: 15MB
management:
  endpoints:
    web:
      base-path: /admin
      exposure:
        include: health
  metrics:
    export:
      influx:
        enabled: false
feign:
  client:
    config:
      default:
        loggerLevel: basic
application:
  kafka:
    topic-configuration:
      "data-export.job.update":
        partitions: ${DATA_EXPORT_JOB_UPDATE_TOPIC_PARTITIONS:50}
      "edi-export-history.create":
        partitions: ${EDI_EXPORT_HISTORY_TOPIC_PARTITIONS:1}
    topic-pattern: ${ENV:folio}.(.*\.)?data-export.job.command
    group-id: ${ENV:folio}-mod-data-export-worker-events-group
  minio-remote:
    endpoint: ${AWS_URL:http://127.0.0.1:9000/}
    region: ${AWS_REGION:}
    bucket: ${AWS_BUCKET:}
    accessKey: ${AWS_ACCESS_KEY_ID:}
    secretKey: ${AWS_SECRET_ACCESS_KEY:}
    composeWithAwsSdk: ${LOCAL_FS_COMPOSE_WITH_AWS_SDK:false}
  minio-local:
    endpoint: ${LOCAL_FS_URL:http://127.0.0.1:9000/}
    region: ${LOCAL_FS_REGION:}
    bucket: ${LOCAL_FS_BUCKET:}
    accessKey: ${LOCAL_FS_ACCESS_KEY_ID:}
    secretKey: ${LOCAL_FS_SECRET_ACCESS_KEY:}
    composeWithAwsSdk: ${LOCAL_FS_COMPOSE_WITH_AWS_SDK:false}
  ftp:
    bufferSize: 1048576 #that 1024 * 1024
    defaultPort: 21
    workingDir: /files
    defaultTimeout: 30000
    controlKeepAliveTimeout: 30
  bucket:
    size: ${BUCKET_SIZE:50}
  e-holdings-batch:
    job-chunk-size: ${E_HOLDINGS_BATCH_JOB_CHUNK_SIZE:100}
    kb-ebsco-chunk-size: ${E_HOLDINGS_BATCH_KB_EBSCO_CHUNK_SIZE:100}
folio:
  tenant:
    validation:
      enabled: true
logging:
  level:
    org.folio.dew.client.*: debug
